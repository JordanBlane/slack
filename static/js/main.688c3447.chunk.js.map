{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["username","prompt","getData","curchannel","curtheme","App","state","Message","Username","Workspace","currentChannel","className","this","WorkspaceName","Topbar","Messages","React","Component","Options","id","onClick","Lighttheme","darktheme","SideBar","toggleThemes","onMouseOver","topHover","onMouseOut","topHoverOut","resetJSON","Name","Id","themeDiv","document","getElementById","style","display","sidebar","backgroundColor","color","messagebox","topbar","getElementsByTagName","channelButtons","getElementsByClassName","i","length","ChatBox","placeholder","onKeyDown","enterToChat","Channel","data-id","chatChange","channelHover","channelHoverOut","setData","general","topic","messages","messageUser","resources","code","challenges","dev","random","users","activeButton","x","loadChats","target","innerHTML","dataset","buttons","button","e","border","element1","element2","keyCode","input","MessageObject","Date","getHours","getMinutes","value","scrollTop","scrollHeight","clientHeight","send","a","Promise","resolve","reject","$","get","data","console","log","ajax","url","type","JSON","stringify","contentType","dataType","success","textStatus","jqXHR","window","setInterval","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.688c3447.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery'\n\n//gets username, makes sure its not blank\nvar username = prompt('username');\n\n//set theme\n\n//gets data from json file and sets it to MessageObject var\ngetData();\n\n//used later to get current channel\nvar curchannel = '';\nvar curchanneltopic = '';\n\n//current theme;\nvar curtheme = 1;\n\n//main app class\nclass App extends React.Component{\n  //sets state\n  state ={\n    Message:'',\n    Username:username,\n    Workspace:'Important',\n    currentChannel:'',\n  }\n  render(){\n    return(\n      <div className='mainWrapper'>\n        <SideBar Username={this.state.Username} WorkspaceName={this.state.Workspace}/>\n        <Topbar />\n        <ChatBox />\n        <Messages />\n      </div>\n    )\n  }\n}\nfunction Options(){\n  return(\n    <div id=\"themes\" className = 'options'>\n      <h2>Options</h2>\n      <h4>Themes</h4>\n      <button id='light' onClick={Lighttheme}>Light Theme</button>\n      <button id='dark' onClick={darktheme}>Dark Theme</button>\n      <button id='pug'>Pug Theme</button>\n      <button id='rainbow'>Rainbow Theme</button>\n    </div>\n  )\n}\n\n//purple side bar\nfunction SideBar(SideBar){\n  return(\n    <div id=\"sidebar\" className=\"sidebar\">\n      <div onClick={toggleThemes} onMouseOver={topHover} onMouseOut={topHoverOut} id=\"sideTop\">\n        <div id=\"sideProfile\">\n          <h1>{SideBar.WorkspaceName}<span id=\"topspan\">â–¼</span></h1>\n          <div id=\"online\"></div>\n          <p id=\"sideName\">{SideBar.Username}</p>\n          <i onClick={resetJSON} className=\"fa fa-bell\"></i>\n        </div>\n        <div id=\"sideSearch\">\n        </div>\n      </div>\n      <div id=\"sideBottom\">\n        <Options />\n        <h2 id=\"channels\">Channels</h2>\n        <Channel Name='# general' Id='1'/>\n        <Channel Name='# resources' Id='2'/>\n        <Channel Name='# code' Id='3'/>\n        <Channel Name='# challenges' Id='4'/>\n        <Channel Name='# dev' Id='5'/>\n        <Channel Name='# random' Id='6'/>\n      </div>\n    </div>\n  )\n}\n\n//function shows and hides themes\nfunction toggleThemes(){\n  let themeDiv = document.getElementById('themes');\n  if(themeDiv.style.display == \"inline-block\"){\n    themeDiv.style.display = \"none\"\n  }else{\n    themeDiv.style.display = \"inline-block\"\n  }\n}\n\n//theme selector\n\nfunction Lighttheme(){\n  curtheme = 1;\n  //sidebar css\n  var sidebar = document.getElementById('sidebar');\n  //sidebar colors\n  sidebar.style.backgroundColor= '#3F0E40';\n  sidebar.style.color='white';\n  //messagebox\n  var messagebox = document.getElementById('mc');\n  messagebox.style.backgroundColor = 'white';\n  messagebox.style.color = 'black';\n  //topbar\n  var topbar = document.getElementById('topbar');\n  topbar.style.backgroundColor='rgba(100,100,100,0.2)';\n  topbar.style.color = 'black';\n\n  document.getElementsByTagName('body')[0].style.backgroundColor = 'white';\n\n\n    //resets button backgrounds\n    let channelButtons = document.getElementsByClassName(\"chatButtons\")\n    for(let i=0;i<channelButtons.length;i++){\n        channelButtons[i].style.backgroundColor = \"#3F0E40\";\n    }\n}\n\n// function rainbowtheme(){\n//   curtheme = 4;\n//   //sidebar css\n//   var sidebar = document.getElementById('sidebar');\n//   //sidebar colors\n//   sidebar.style.animationName = 'fade';\n//   sidebar.style.animationDuration = '2s';\n//   sidebar.style.animationIterationCount = 'infinite';\n//   sidebar.style.backgroundColor= '#3F0E40';\n//   sidebar.style.color='white';\n//   //messagebox\n//   var messagebox = document.getElementById('mc');\n//   messagebox.style.backgroundColor = 'white';\n//   messagebox.style.color = 'black';\n//   //topbar\n//   var topbar = document.getElementById('topbar');\n//   topbar.style.color = 'black';\n//   topbar.style.animationName = 'fade';\n//   topbar.style.animationDuration = '2s';\n//   topbar.style.animationIterationCount = 'infinite';\n//   //channel s\n\n\n// }\n\n//dark theme\nfunction darktheme(){\n  curtheme = 2;\n  //sidebar css\n  var sidebar = document.getElementById('sidebar');\n  //sidebar colors\n  sidebar.style.backgroundColor= '#19171D';\n  sidebar.style.color='rgb(163,163,166)';\n  //messagebox\n  var messagebox = document.getElementById('mc');\n  messagebox.style.backgroundColor = '#9a9c9e';\n  messagebox.style.color = 'white';\n  //topbar\n  var topbar = document.getElementById('topbar');\n  topbar.style.backgroundColor='#19171D';\n  topbar.style.color = 'gray';\n\n  //changes body colour\n  document.getElementsByTagName(\"body\")[0].style.backgroundColor = \"#9a9c9e\"\n  \n\n  //resets button backgrounds\n  let channelButtons = document.getElementsByClassName(\"chatButtons\")\n  for(let i=0;i<channelButtons.length;i++){\n      channelButtons[i].style.backgroundColor = \"#19171D\";\n  }\n\n}\n\n//top bar\n\nfunction Topbar(){\n  return(\n    <div id ='topbar' className='topbar'>\n      <h2 id='topbarchan'>{curchannel}</h2>\n    </div>\n  )\n}\n\n//chatbox\nfunction ChatBox(ChatBox){\n  return(\n    <div className ='ChatBox'>\n      <input id=\"chatbox\" placeholder={\"Message \" +curchannel}onKeyDown={enterToChat}></input>\n    </div>\n  )\n}\n\n//each message element\nfunction Messages(){\n  return(\n    <div id=\"mc\" className='mc'>\n      <p id='messages'></p>\n    </div>\n  )\n}\n//channel button element\nfunction Channel(Channel){\n  return(\n    <div className=\"channelNameClass\">\n      <button className=\"chatButtons\" data-id={Channel.Id} onClick={chatChange} onMouseOver={channelHover} onMouseOut={channelHoverOut}>{Channel.Name}</button>\n    </div>\n  )\n}\n\nfunction resetJSON(){\n  let template = {\n    general:{topic:['CHANGEME'],messages:[],messageUser:[]},\n    resources:{topic:['CHANGEME'],messages:[],messageUser:[]},\n    code:{topic:['CHANGEME'],messages:[],messageUser:[]},\n    challenges:{topic:['CHANGEME'],messages:[],messageUser:[]},\n    dev:{topic:['CHANGEME'],messages:[]},\n    random:{topic:['CHANGEME'],messages:[]},\n    users:{users:['Jordan', 'Enzo']},\n  }\n  setData(template)\n}\n\nlet activeButton = '0';\n//when you change channel it loads the right chat\nfunction chatChange(x){\n  loadChats();\n  curchannel = x.target.innerHTML;\n  activeButton = x.target.dataset.id; \n  let buttons = document.getElementsByClassName(\"chatButtons\");\n  for(let i=0;i<buttons.length;i++){\n    switch(curtheme){\n      case 1:\n        buttons[i].style.backgroundColor = \"#3F0E40\";\n        buttons[i].style.color = \"rgb(207,195,207)\";\n        break;\n      case 2:\n        buttons[i].style.backgroundColor = \"#19171D\";\n        buttons[i].style.color = \"rgb(163,163,166)\";\n        break;\n    }\n  }\n  let button = x.target;\n  button.style.backgroundColor = \"#1164A3\";\n  button.style.color = \"white\";\n  var s = document.getElementById('chatbox');\n  s.placeholder = 'Message ' +curchannel\n  var a = document.getElementById('topbarchan');\n  a.innerHTML = curchannel;\n}\n//style for hovering over a channel name\nfunction channelHover(e){\n  if( !(e.target.dataset.id == activeButton )  && curtheme ==1){\n    e.target.style.backgroundColor = \"rgb(44, 7, 44)\";\n    e.target.style.border = \"none\";\n  }\n}\nfunction channelHoverOut(e){\n  if( !(e.target.dataset.id == activeButton) && curtheme == 1 ){\n    e.target.style.backgroundColor = \"#3F0E40\";\n  }\n}\n//styling for hovering over topbar\nfunction topHover(){\n  let element1 = document.getElementById(\"sideName\");\n  let element2 = document.getElementById(\"topspan\");\n  element1.style.color = \"white\";\n  element2.style.color = \"white\";\n}\nfunction topHoverOut(){\n  let element1 = document.getElementById(\"sideName\");\n  let element2 = document.getElementById(\"topspan\");\n  element1.style.color = \"rgb(202, 200, 200)\";\n  element2.style.color = \"rgb(202, 200, 200)\";\n\n}\n\n//when you press enter sends message\nfunction enterToChat(e){\n  if(e.keyCode == 13){\n    send()\n  }\n}\n\n\n//sends message to json\nfunction send(e){\n  var input = document.getElementById('chatbox');\n  var messagebox = document.getElementById('messages');\n  switch(curchannel){\n    case '# general':\n      MessageObject.general.messages[MessageObject.general.messages.length] =  '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.general.messages[MessageObject.general.messages.length-1] + '<br>';\n      break;\n    case '# resources':\n      MessageObject.resources.messages[MessageObject.resources.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.resources.messages[MessageObject.resources.messages.length-1] + '<br>';\n      break;\n    case '# code':\n      MessageObject.code.messages[MessageObject.code.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.code.messages[MessageObject.code.messages.length-1] + '<br>';\n      break;\n    case '# challenges':\n      MessageObject.challenges.messages[MessageObject.challenges.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.challenges.messages[MessageObject.challenges.messages.length-1] + '<br>';\n      break;\n    case '# dev':\n        MessageObject.dev.messages[MessageObject.dev.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n        messagebox.innerHTML += MessageObject.dev.messages[MessageObject.dev.messages.length-1] + '<br>';\n        break; \n    case '# random':\n        MessageObject.random.messages[MessageObject.random.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n        messagebox.innerHTML += MessageObject.random.messages[MessageObject.random.messages.length-1] + '<br>';\n        break; \n  }\n  setData(MessageObject)\n  messagebox.scrollTop = messagebox.scrollHeight - messagebox.clientHeight;\n  input.value = '';\n}\n\n//gets data from server\nvar MessageObject = 0;\nasync function getData(){\n  await getDataPromise()\n  return MessageObject\n}\n\nfunction getDataPromise(){\n  new Promise((resolve,reject) =>{\n    $.get( \"https://api.myjson.com/bins/17y9r6\", function( data ) {\n      console.log( \"Data Loaded: \");\n      MessageObject = data;\n      resolve();\n    });\n  })\n}\n\n//pushes to json\nfunction setData(data){\n  $.ajax({\n    url:\"https://api.myjson.com/bins/17y9r6\",\n    type:\"PUT\",\n    data: JSON.stringify(data),\n    contentType:\"application/json; charset=utf-8\",\n    dataType:\"json\",\n    success: function(data, textStatus, jqXHR){\n      console.log(\"updated\")\n    }\n  });\n}\n\n//loads all previous chats from json\nfunction loadChats(){\n  getData()\n  var messagebox = document.getElementById('messages');\n  messagebox.innerHTML = '';\n  switch(curchannel){\n    case '# general':\n      for(var i=0;i<MessageObject.general.messages.length;i++){\n        messagebox.innerHTML += MessageObject.general.messages[i] + \"<br>\";\n      }\n      break;\n    case '# resources':\n      for(var i=0;i<MessageObject.resources.messages.length;i++){\n        messagebox.innerHTML += MessageObject.resources.messages[i] + \"<br>\";\n      }\n      break;\n    case '# code':\n      for(var i=0;i<MessageObject.code.messages.length;i++){\n        messagebox.innerHTML += MessageObject.code.messages[i] + \"<br>\";\n      }\n      break;\n    case '# challenges':\n      for(var i=0;i<MessageObject.challenges.messages.length;i++){\n        messagebox.innerHTML += MessageObject.challenges.messages[i] + \"<br>\";\n      }\n      break;\n    case '# dev':\n        for(var i=0;i<MessageObject.dev.messages.length;i++){\n          messagebox.innerHTML += MessageObject.dev.messages[i] + \"<br>\";\n        }\n        break;\n    case '# random':\n        for(var i=0;i<MessageObject.random.messages.length;i++){\n          messagebox.innerHTML += MessageObject.random.messages[i] + \"<br>\";\n        }\n        break;\n  }\n  messagebox.scrollTop = messagebox.scrollHeight - messagebox.clientHeight;\n\n}\n\n//update screen with messages\nwindow.setInterval(loadChats, 1000);\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}