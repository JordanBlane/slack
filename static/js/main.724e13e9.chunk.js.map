{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["username","prompt","getData","App","state","Message","Username","Workspace","currentChannel","className","this","WorkspaceName","Messages","React","Component","SideBar","onMouseOver","topHover","onMouseOut","topHoverOut","id","Name","Id","ChatBox","onClick","send","Channel","data-id","chatChange","channelHover","channelHoverOut","activeButton","x","alert","loadChats","target","dataset","buttons","document","getElementsByClassName","i","length","style","backgroundColor","color","button","e","border","element1","getElementById","element2","data","input","messagebox","console","log","MessageObject","general","messages","value","innerHTML","$","ajax","url","type","JSON","stringify","contentType","dataType","success","textStatus","jqXHR","scrollTop","scrollHeight","clientHeight","a","Promise","resolve","reject","get","window","setInterval","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.724e13e9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery'\n\nvar username =  prompt('Whats your name? ')\n\nvar curindex;\n//gets data from json file and sets it to MessageObject var\ngetData();\n\n\n//resets the json file\n// let template = {general:{messages:[],messageUser:[]}}\n// setData(template)\n//\n\nclass App extends React.Component{\n  state ={\n    Message:'',\n    Username:username,\n    Workspace:'important',\n    currentChannel:'',\n  }\n  render(){\n    return(\n      <div className='mainWrapper'>\n        <SideBar Username={this.state.Username} WorkspaceName={this.state.Workspace}/>\n        <ChatBox />\n        <Messages />\n      </div>\n    )\n  }\n}\n\n//purple side bar\nfunction SideBar(SideBar){\n  return(\n    <div className=\"sidebar\">\n      <div onMouseOver={topHover} onMouseOut={topHoverOut} id=\"sideTop\">\n        <div id=\"sideProfile\">\n          <h1>{SideBar.WorkspaceName}<span id=\"topspan\">â–¼</span></h1>\n          <div id=\"online\"></div>\n          <p id=\"sideName\">{SideBar.Username}</p>\n          <i className=\"fa fa-bell\"></i>\n        </div>\n        <div id=\"sideSearch\">\n        </div>\n      </div>\n      <div id=\"sideBottom\">\n        <h2 id=\"channels\">Channels</h2>\n        <Channel Name='# general' Id='1'/>\n        <Channel Name='# resources' Id='2'/>\n        <Channel Name='# code' Id='3'/>\n        <Channel Name='# challenges' Id='4'/>\n      </div>\n    </div>\n  )\n}\n\n//chatbox\nfunction ChatBox(ChatBox){\n  return(\n    <div className ='ChatBox'>\n      <textarea id=\"chatbox\"></textarea>\n      <button onClick={send}>SEND</button>\n    </div>\n  )\n}\nfunction Messages(){\n  return(\n    <div className='mc'>\n      <p id='messages'></p>\n    </div>\n  )\n}\n\n\nfunction Channel(Channel){\n  return(\n    <div>\n      <button className=\"chatButtons\" data-id={Channel.Id} onClick={chatChange} onMouseOver={channelHover} onMouseOut={channelHoverOut}>{Channel.Name}</button>\n    </div>\n  )\n}\nlet activeButton = '0';\nfunction chatChange(x){\n  if(x == 1){\n    alert('general');\n  }\n  loadChats();\n  activeButton = x.target.dataset.id;\n  let buttons = document.getElementsByClassName(\"chatButtons\");\n  for(let i=0;i<buttons.length;i++){\n    buttons[i].style.backgroundColor = \"#3F0E40\";\n    buttons[i].style.color = \"rgb(207,195,207)\";\n  }\n  let button = x.target;\n  button.style.backgroundColor = \"#1164A3\";\n  button.style.color = \"white\";\n}\nfunction channelHover(e){\n  if( !(e.target.dataset.id == activeButton) ){\n    e.target.style.backgroundColor = \"rgb(44, 7, 44)\";\n    e.target.style.border = \"none\";\n  }\n}\nfunction channelHoverOut(e){\n  if( !(e.target.dataset.id == activeButton) ){\n    e.target.style.backgroundColor = \"#3F0E40\";\n  }\n}\n\nfunction topHover(){\n  let element1 = document.getElementById(\"sideName\");\n  let element2 = document.getElementById(\"topspan\");\n  element1.style.color = \"white\";\n  element2.style.color = \"white\";\n}\nfunction topHoverOut(){\n  let element1 = document.getElementById(\"sideName\");\n  let element2 = document.getElementById(\"topspan\");\n  element1.style.color = \"rgb(202, 200, 200)\";\n  element2.style.color = \"rgb(202, 200, 200)\";\n\n}\n\nfunction send(){\n  var input = document.getElementById('chatbox');\n  var messagebox = document.getElementById('messages');\nconsole.log(MessageObject)\n  MessageObject.general.messages[MessageObject.general.messages.length] = username +':  ' +input.value;\n  messagebox.innerHTML += MessageObject.general.messages[MessageObject.general.messages.length-1] + '<br>';\n\n  \n  setData(MessageObject)\n  messagebox.scrollTop = messagebox.scrollHeight - messagebox.clientHeight;\n}\n\nvar MessageObject = 0;\nasync function getData(){\n  await getDataPromise()\n  return MessageObject\n}\n\nfunction getDataPromise(){\n  new Promise((resolve,reject) =>{\n    $.get( \"https://api.myjson.com/bins/17y9r6\", function( data ) {\n      console.log( \"Data Loaded: \");\n      MessageObject = data;\n      resolve();\n    });\n  })\n}\n\n//pushes to json\nfunction setData(data){\n  $.ajax({\n    url:\"https://api.myjson.com/bins/17y9r6\",\n    type:\"PUT\",\n    data: JSON.stringify(data),\n    contentType:\"application/json; charset=utf-8\",\n    dataType:\"json\",\n    success: function(data, textStatus, jqXHR){\n      console.log(\"updated\")\n    }\n  });\n}\n\n//loads all previous chats from json\nfunction loadChats(){\n  getData()\n  var messagebox = document.getElementById('messages');\n  messagebox.innerHTML = '';\n  for(var i=0;i<MessageObject.general.messages.length;i++){\n    messagebox.innerHTML += MessageObject.general.messages[i] + \"<br>\";\n  }\n  messagebox.scrollTop = messagebox.scrollHeight - messagebox.clientHeight;\n  curindex = MessageObject.general.messages.length;\n\n}\n\n//update screen with messages\nwindow.setInterval(loadChats, 2000);\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}