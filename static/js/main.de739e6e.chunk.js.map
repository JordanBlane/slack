{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["username","prompt","getData","curchannel","App","state","Message","Username","Workspace","currentChannel","className","this","WorkspaceName","Topbar","Messages","React","Component","SideBar","onMouseOver","topHover","onMouseOut","topHoverOut","id","Name","Id","ChatBox","placeholder","onKeyDown","enterToChat","onClick","resetJson","Channel","data-id","chatChange","channelHover","channelHoverOut","setData","general","messages","messageUser","resources","code","challenges","users","activeButton","x","loadChats","target","innerHTML","dataset","buttons","document","getElementsByClassName","i","length","style","backgroundColor","color","button","getElementById","e","border","element1","element2","keyCode","input","messagebox","MessageObject","Date","getHours","getMinutes","value","scrollTop","scrollHeight","clientHeight","send","a","Promise","resolve","reject","$","get","data","console","log","ajax","url","type","JSON","stringify","contentType","dataType","success","textStatus","jqXHR","window","setInterval","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de739e6e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery'\n\n//gets username, makes sure its not blank\nvar username = prompt('username');\n\n//gets data from json file and sets it to MessageObject var\ngetData();\n\n//used later to get current channel\nvar curchannel = '# general';\n\n//main app class\nclass App extends React.Component{\n  //sets state\n  state ={\n    Message:'',\n    Username:username,\n    Workspace:'Important',\n    currentChannel:'',\n  }\n  render(){\n    return(\n      <div className='mainWrapper'>\n        <SideBar Username={this.state.Username} WorkspaceName={this.state.Workspace}/>\n        <Topbar />\n        <ChatBox />\n        <Messages />\n      </div>\n    )\n  }\n}\n\n//purple side bar\nfunction SideBar(SideBar){\n  return(\n    <div className=\"sidebar\">\n      <div onMouseOver={topHover} onMouseOut={topHoverOut} id=\"sideTop\">\n        <div id=\"sideProfile\">\n          <h1>{SideBar.WorkspaceName}<span id=\"topspan\">â–¼</span></h1>\n          <div id=\"online\"></div>\n          <p id=\"sideName\">{SideBar.Username}</p>\n          <i className=\"fa fa-bell\"></i>\n        </div>\n        <div id=\"sideSearch\">\n        </div>\n      </div>\n      <div id=\"sideBottom\">\n        <h2 id=\"channels\">Channels</h2>\n        <Channel Name='# general' Id='1'/>\n        <Channel Name='# resources' Id='2'/>\n        <Channel Name='# code' Id='3'/>\n        <Channel Name='# challenges' Id='4'/>\n      </div>\n    </div>\n  )\n}\n\n//top bar\n\nfunction Topbar(){\n  return(\n    <div className='topbar'>\n      <h2 id='topbarchan'>{curchannel}</h2>\n    </div>\n  )\n}\n\n//chatbox\nfunction ChatBox(ChatBox){\n  return(\n    <div className ='ChatBox'>\n      <input id=\"chatbox\" placeholder={\"Message \" +curchannel}onKeyDown={enterToChat}></input>\n      <button id='reset' onClick={resetJson}>GAY BUTTON</button>\n    </div>\n  )\n}\n\n//each message element\nfunction Messages(){\n  return(\n    <div className='mc'>\n      <p id='messages'></p>\n    </div>\n  )\n}\n//channel button element\nfunction Channel(Channel){\n  return(\n    <div className=\"channelNameClass\">\n      <button className=\"chatButtons\" data-id={Channel.Id} onClick={chatChange} onMouseOver={channelHover} onMouseOut={channelHoverOut}>{Channel.Name}</button>\n    </div>\n  )\n}\n\nfunction resetJson(){\n  let template = {\n    general:{messages:[],messageUser:[]},\n    resources:{messages:[],messageUser:[]},\n    code:{messages:[],messageUser:[]},\n    challenges:{messages:[],messageUser:[]},\n    users:{users:['Jordan', 'Enzo']},\n  }\n  setData(template)\n}\n\nlet activeButton = '0';\n//when you change channel it loads the right chat\nfunction chatChange(x){\n  loadChats();\n  curchannel = x.target.innerHTML;\n  activeButton = x.target.dataset.id; \n  let buttons = document.getElementsByClassName(\"chatButtons\");\n  for(let i=0;i<buttons.length;i++){\n    buttons[i].style.backgroundColor = \"#3F0E40\";\n    buttons[i].style.color = \"rgb(207,195,207)\";\n  }\n  let button = x.target;\n  button.style.backgroundColor = \"#1164A3\";\n  button.style.color = \"white\";\n  var s = document.getElementById('chatbox');\n  s.placeholder = 'Message ' +curchannel\n  var a = document.getElementById('topbarchan');\n  a.innerHTML = curchannel;\n}\n//style for hovering over a channel name\nfunction channelHover(e){\n  if( !(e.target.dataset.id == activeButton) ){\n    e.target.style.backgroundColor = \"rgb(44, 7, 44)\";\n    e.target.style.border = \"none\";\n  }\n}\nfunction channelHoverOut(e){\n  if( !(e.target.dataset.id == activeButton) ){\n    e.target.style.backgroundColor = \"#3F0E40\";\n  }\n}\n//styling for hovering over topbar\nfunction topHover(){\n  let element1 = document.getElementById(\"sideName\");\n  let element2 = document.getElementById(\"topspan\");\n  element1.style.color = \"white\";\n  element2.style.color = \"white\";\n}\nfunction topHoverOut(){\n  let element1 = document.getElementById(\"sideName\");\n  let element2 = document.getElementById(\"topspan\");\n  element1.style.color = \"rgb(202, 200, 200)\";\n  element2.style.color = \"rgb(202, 200, 200)\";\n\n}\n\n//when you press enter sends message\nfunction enterToChat(e){\n  if(e.keyCode == 13){\n    send()\n  }\n}\n\n\n//sends message to json\nfunction send(e){\n  var input = document.getElementById('chatbox');\n  var messagebox = document.getElementById('messages');\n  switch(curchannel){\n    case '# general':\n      MessageObject.general.messages[MessageObject.general.messages.length] =  '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.general.messages[MessageObject.general.messages.length-1] + '<br>';\n      break;\n    case '# resources':\n      MessageObject.resources.messages[MessageObject.resources.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.resources.messages[MessageObject.resources.messages.length-1] + '<br>';\n      break;\n    case '# code':\n      MessageObject.code.messages[MessageObject.code.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.code.messages[MessageObject.code.messages.length-1] + '<br>';\n      break;\n    case '# challenges':\n      MessageObject.challenges.messages[MessageObject.challenges.messages.length] = '<span id=\"name\">'+username +' </span> <span id=\"date\">' +new Date().getHours() +':'+new Date().getMinutes() +'</span> <span id=\"messagevalue\">' +input.value +' ';\n      messagebox.innerHTML += MessageObject.challenges.messages[MessageObject.challenges.messages.length-1] + '<br>';\n      break; \n  }\n  setData(MessageObject)\n  messagebox.scrollTop = messagebox.scrollHeight - messagebox.clientHeight;\n  input.value = '';\n}\n\n//gets data from server\nvar MessageObject = 0;\nasync function getData(){\n  await getDataPromise()\n  return MessageObject\n}\n\nfunction getDataPromise(){\n  new Promise((resolve,reject) =>{\n    $.get( \"https://api.myjson.com/bins/17y9r6\", function( data ) {\n      console.log( \"Data Loaded: \");\n      MessageObject = data;\n      resolve();\n    });\n  })\n}\n\n//pushes to json\nfunction setData(data){\n  $.ajax({\n    url:\"https://api.myjson.com/bins/17y9r6\",\n    type:\"PUT\",\n    data: JSON.stringify(data),\n    contentType:\"application/json; charset=utf-8\",\n    dataType:\"json\",\n    success: function(data, textStatus, jqXHR){\n      console.log(\"updated\")\n    }\n  });\n}\n\n//loads all previous chats from json\nfunction loadChats(){\n  getData()\n  var messagebox = document.getElementById('messages');\n  messagebox.innerHTML = '';\n  switch(curchannel){\n    case '# general':\n      for(var i=0;i<MessageObject.general.messages.length;i++){\n        messagebox.innerHTML += MessageObject.general.messages[i] + \"<br>\";\n      }\n      break;\n    case '# resources':\n      for(var i=0;i<MessageObject.resources.messages.length;i++){\n        messagebox.innerHTML += MessageObject.resources.messages[i] + \"<br>\";\n      }\n      break;\n    case '# code':\n      for(var i=0;i<MessageObject.code.messages.length;i++){\n        messagebox.innerHTML += MessageObject.code.messages[i] + \"<br>\";\n      }\n      break;\n    case '# challenges':\n      for(var i=0;i<MessageObject.challenges.messages.length;i++){\n        messagebox.innerHTML += MessageObject.challenges.messages[i] + \"<br>\";\n      }\n      break;\n  }\n  messagebox.scrollTop = messagebox.scrollHeight - messagebox.clientHeight;\n\n}\n\n//update screen with messages\nwindow.setInterval(loadChats, 1000);\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}